#Information scraped from the Arm ISA https://developer.arm.com/docs/ddi0596/i

CONDITIONALS = {"EQ":["Equal", "Equal"],
                "NE":["Not equal", "Not equal or unordered"],
                "CS":["Carry set", "Greater than, equal, or unordered"],
                "HS":["Carry set", "Greater than, equal, or unordered"],
                "CC":["Carry clear", "Less than"],
                "LO":["Carry clear", "Less than"],
                "MI":["Minus, negative", "Less than"],
                "PL":["Plus, positive or zero", "Greater than, equal, or unordered"],
                "VS":["Overflow", "Unordered"], "VC":["No overflow", "Ordered"],
                "HI":["Unsigned higher", "Greater than, or unordered"],
                "LS":["Unsigned lower or same", "Less than or equal"],
                "GE":["Signed greater than or equal", "Greater than or equal"],
                "LT":["Signed less than", "Less than, or unordered"],
                "GT":["Signed greater than", "Greater than"],
                "LE":["Signed less than or equal", "Less than, equal, or unordered"],
                "AL":["Always", "Always"],
                "NV":["Always", "Always"]}

ISA_BASE = {'ADC':[['Add with Carry', '']],
            'ADCS':[['Add with Carry, setting flags', '']],
            'ADD':[['Add (extended register)', '(extended register)'], ['Add (immediate)', '(immediate)'], ['Add (shifted register)', '(shifted register)']],
            'ADDG':[['Add with Tag', '']],
            'ADDS':[['Add (extended register), setting flags', '(extended register)'], ['Add (immediate), setting flags', '(immediate)'], ['Add (shifted register), setting flags', '(shifted register)']],
            'ADR':[['Form PC-relative address', '']],
            'ADRP':[['Form PC-relative address to 4KB page', '']],
            'AND':[['Bitwise AND (immediate)', '(immediate)'], ['Bitwise AND (shifted register)', '(shifted register)']],
            'ANDS':[['Bitwise AND (immediate), setting flags', '(immediate)'], ['Bitwise AND (shifted register), setting flags', '(shifted register)']],
            'ASR':[['Arithmetic Shift Right (immediate)', '(immediate)'], ['Arithmetic Shift Right (register)', '(register)']],
            'ASRV':[['Arithmetic Shift Right Variable', '']],
            'AT':[['Address Translate', '']],
            'AUTDA':[['Authenticate Data address, using key A', '']],
            'AUTDB':[['Authenticate Data address, using key B', '']],
            'AUTDZA':[['Authenticate Data address, using key A', '']],
            'AUTDZB':[['Authenticate Data address, using key B', '']],
            'AUTIA':[['Authenticate Instruction address, using key A', '']],
            'AUTIA1716':[['Authenticate Instruction address, using key A', '']],
            'AUTIASP':[['Authenticate Instruction address, using key A', '']],
            'AUTIAZ':[['Authenticate Instruction address, using key A', '']],
            'AUTIB':[['Authenticate Instruction address, using key B', '']],
            'AUTIB1716':[['Authenticate Instruction address, using key B', '']],
            'AUTIBSP':[['Authenticate Instruction address, using key B', '']],
            'AUTIBZ':[['Authenticate Instruction address, using key B', '']],
            'AUTIZA':[['Authenticate Instruction address, using key A', '']],
            'AUTIZB':[['Authenticate Instruction address, using key B', '']],
            'AXFlag':[['Convert floating-point condition flags from ARM to external format', '']],
            'B':[['Branch', '']],
            'B.AL':[['Branch conditionally', '']],
            'B.CC':[['Branch conditionally', '']],
            'B.CS':[['Branch conditionally', '']],
            'B.EQ':[['Branch conditionally', '']],
            'B.GE':[['Branch conditionally', '']],
            'B.GT':[['Branch conditionally', '']],
            'B.HI':[['Branch conditionally', '']],
            'B.HS':[['Branch conditionally', '']],
            'B.LE':[['Branch conditionally', '']],
            'B.LO':[['Branch conditionally', '']],
            'B.LS':[['Branch conditionally', '']],
            'B.LT':[['Branch conditionally', '']],
            'B.MI':[['Branch conditionally', '']],
            'B.NE':[['Branch conditionally', '']],
            'B.NV':[['Branch conditionally', '']],
            'B.PL':[['Branch conditionally', '']],
            'B.VC':[['Branch conditionally', '']],
            'B.VS':[['Branch conditionally', '']],
            'BAL':[['Branch conditionally', '']],
            'BCC':[['Branch conditionally', '']],
            'BCS':[['Branch conditionally', '']],
            'BEQ':[['Branch conditionally', '']],
            'BFC':[['Bitfield Clear', '']],
            'BFI':[['Bitfield Insert', '']],
            'BFM':[['Bitfield Move', '']],
            'BFXIL':[['Bitfield extract and insert at low end', '']],
            'BGE':[['Branch conditionally', '']],
            'BGT':[['Branch conditionally', '']],
            'BHI':[['Branch conditionally', '']],
            'BHS':[['Branch conditionally', '']],
            'BIC':[['Bitwise Bit Clear (shifted register)', '(shifted register)']],
            'BICS':[['Bitwise Bit Clear (shifted register), setting flags', '(shifted register)']],
            'BL':[['Branch with Link', '']],
            'BLE':[['Branch conditionally', '']],
            'BLO':[['Branch conditionally', '']],
            'BLR':[['Branch with Link to Register', '']],
            'BLRAA':[['Branch with Link to Register, with pointer authentication', '']],
            'BLRAAZ':[['Branch with Link to Register, with pointer authentication', '']],
            'BLRAB':[['Branch with Link to Register, with pointer authentication', '']],
            'BLRABZ':[['Branch with Link to Register, with pointer authentication', '']],
            'BLS':[['Branch conditionally', '']],
            'BLT':[['Branch conditionally', '']],
            'BMI':[['Branch conditionally', '']],
            'BNE':[['Branch conditionally', '']],
            'BNV':[['Branch conditionally', '']],
            'BPL':[['Branch conditionally', '']],
            'BR':[['Branch to Register', '']],
            'BRAA':[['Branch to Register, with pointer authentication', '']],
            'BRAAZ':[['Branch to Register, with pointer authentication', '']],
            'BRAB':[['Branch to Register, with pointer authentication', '']],
            'BRABZ':[['Branch to Register, with pointer authentication', '']],
            'BRK':[['Breakpoint instruction', '']],
            'BTI':[['Branch Target Identification', '']],
            'BVC':[['Branch conditionally', '']],
            'BVS':[['Branch conditionally', '']],
            'CAS':[['Compare and Swap word or doubleword in memory', '']],
            'CASA':[['Compare and Swap word or doubleword in memory', '']],
            'CASAB':[['Compare and Swap byte in memory', '']],
            'CASAH':[['Compare and Swap halfword in memory', '']],
            'CASAL':[['Compare and Swap word or doubleword in memory', '']],
            'CASALB':[['Compare and Swap byte in memory', '']],
            'CASALH':[['Compare and Swap halfword in memory', '']],
            'CASB':[['Compare and Swap byte in memory', '']],
            'CASH':[['Compare and Swap halfword in memory', '']],
            'CASL':[['Compare and Swap word or doubleword in memory', '']],
            'CASLB':[['Compare and Swap byte in memory', '']],
            'CASLH':[['Compare and Swap halfword in memory', '']],
            'CASP':[['Compare and Swap Pair of words or doublewords in memory', '']],
            'CASPA':[['Compare and Swap Pair of words or doublewords in memory', '']],
            'CASPAL':[['Compare and Swap Pair of words or doublewords in memory', '']],
            'CASPL':[['Compare and Swap Pair of words or doublewords in memory', '']],
            'CBNZ':[['Compare and Branch on Nonzero', '']],
            'CBZ':[['Compare and Branch on Zero', '']],
            'CCMN':[['Conditional Compare Negative (immediate)', '(immediate)'], ['Conditional Compare Negative (register)', '(register)']],
            'CCMP':[['Conditional Compare (immediate)', '(immediate)'], ['Conditional Compare (register)', '(register)']],
            'CFINV':[['Invert Carry Flag', '']],
            'CFP':[['Control Flow Prediction Restriction by Context', '']],
            'CINC':[['Conditional Increment', '']],
            'CINV':[['Conditional Invert', '']],
            'CLREX':[['Clear Exclusive', '']],
            'CLS':[['Count Leading Sign bits', '']],
            'CLZ':[['Count Leading Zeros', '']],
            'CMN':[['Compare Negative (extended register)', '(extended register)'], ['Compare Negative (immediate)', '(immediate)'], ['Compare Negative (shifted register)', '(shifted register)']],
            'CMP':[['Compare (extended register)', '(extended register)'], ['Compare (immediate)', '(immediate)'], ['Compare (shifted register)', '(shifted register)']],
            'CMPP':[['Compare with Tag', '']],
            'CNEG':[['Conditional Negate', '']],
            'CPP':[['Cache Prefetch Prediction Restriction by Context', '']],
            'CRC32B':[['CRC32 checksum', '']],
            'CRC32CB':[['CRC32C checksum', '']],
            'CRC32CH':[['CRC32C checksum', '']],
            'CRC32CW':[['CRC32C checksum', '']],
            'CRC32CX':[['CRC32C checksum', '']],
            'CRC32H':[['CRC32 checksum', '']],
            'CRC32W':[['CRC32 checksum', '']],
            'CRC32X':[['CRC32 checksum', '']],
            'CSDB':[['Consumption of Speculative Data Barrier', '']],
            'CSEL':[['Conditional Select', '']],
            'CSET':[['Conditional Set', '']],
            'CSETM':[['Conditional Set Mask', '']],
            'CSINC':[['Conditional Select Increment', '']],
            'CSINV':[['Conditional Select Invert', '']],
            'CSNEG':[['Conditional Select Negation', '']],
            'DC':[['Data Cache operation', '']],
            'DCPS1':[['Debug Change PE State to EL1', '']],
            'DCPS2':[['Debug Change PE State to EL2', '']],
            'DCPS3':[['Debug Change PE State to EL3', '']],
            'DMB':[['Data Memory Barrier', '']],
            'DRPS':[['Debug restore process state', '']],
            'DSB':[['Data Synchronization Barrier', '']],
            'DVP':[['Data Value Prediction Restriction by Context', '']],
            'EON':[['Bitwise Exclusive OR NOT (shifted register)', '(shifted register)']],
            'EOR':[['Bitwise Exclusive OR (immediate)', '(immediate)'], ['Bitwise Exclusive OR (shifted register)', '(shifted register)']],
            'ERET':[['Exception Return', '']],
            'ERETAA':[['Exception Return, with pointer authentication', '']],
            'ERETAB':[['Exception Return, with pointer authentication', '']],
            'ESB':[['Error Synchronization Barrier', '']],
            'EXTR':[['Extract register', '']],
            'GMI':[['Tag Mask Insert', '']],
            'HINT':[['Hint instruction', '']],
            'HLT':[['Halt instruction', '']],
            'HVC':[['Hypervisor Call', '']],
            'IC':[['Instruction Cache operation', '']],
            'IRG':[['Insert Random Tag', '']],
            'ISB':[['Instruction Synchronization Barrier', '']],
            'LDADD':[['Atomic add on word or doubleword in memory', '']],
            'LDADDA':[['Atomic add on word or doubleword in memory', '']],
            'LDADDAB':[['Atomic add on byte in memory', '']],
            'LDADDAH':[['Atomic add on halfword in memory', '']],
            'LDADDAL':[['Atomic add on word or doubleword in memory', '']],
            'LDADDALB':[['Atomic add on byte in memory', '']],
            'LDADDALH':[['Atomic add on halfword in memory', '']],
            'LDADDB':[['Atomic add on byte in memory', '']],
            'LDADDH':[['Atomic add on halfword in memory', '']],
            'LDADDL':[['Atomic add on word or doubleword in memory', '']],
            'LDADDLB':[['Atomic add on byte in memory', '']],
            'LDADDLH':[['Atomic add on halfword in memory', '']],
            'LDAPR':[['Load-Acquire RCpc Register', '']],
            'LDAPRB':[['Load-Acquire RCpc Register Byte', '']],
            'LDAPRH':[['Load-Acquire RCpc Register Halfword', '']],
            'LDAPUR':[['Load-Acquire RCpc Register (unscaled)', '']],
            'LDAPURB':[['Load-Acquire RCpc Register Byte (unscaled)', '']],
            'LDAPURH':[['Load-Acquire RCpc Register Halfword (unscaled)', '']],
            'LDAPURSB':[['Load-Acquire RCpc Register Signed Byte (unscaled)', '']],
            'LDAPURSH':[['Load-Acquire RCpc Register Signed Halfword (unscaled)', '']],
            'LDAPURSW':[['Load-Acquire RCpc Register Signed Word (unscaled)', '']],
            'LDAR':[['Load-Acquire Register', '']],
            'LDARB':[['Load-Acquire Register Byte', '']],
            'LDARH':[['Load-Acquire Register Halfword', '']],
            'LDAXP':[['Load-Acquire Exclusive Pair of Registers', '']],
            'LDAXR':[['Load-Acquire Exclusive Register', '']],
            'LDAXRB':[['Load-Acquire Exclusive Register Byte', '']],
            'LDAXRH':[['Load-Acquire Exclusive Register Halfword', '']],
            'LDCLR':[['Atomic bit clear on word or doubleword in memory', '']],
            'LDCLRA':[['Atomic bit clear on word or doubleword in memory', '']],
            'LDCLRAB':[['Atomic bit clear on byte in memory', '']],
            'LDCLRAH':[['Atomic bit clear on halfword in memory', '']],
            'LDCLRAL':[['Atomic bit clear on word or doubleword in memory', '']],
            'LDCLRALB':[['Atomic bit clear on byte in memory', '']],
            'LDCLRALH':[['Atomic bit clear on halfword in memory', '']],
            'LDCLRB':[['Atomic bit clear on byte in memory', '']],
            'LDCLRH':[['Atomic bit clear on halfword in memory', '']],
            'LDCLRL':[['Atomic bit clear on word or doubleword in memory', '']],
            'LDCLRLB':[['Atomic bit clear on byte in memory', '']],
            'LDCLRLH':[['Atomic bit clear on halfword in memory', '']],
            'LDEOR':[['Atomic exclusive OR on word or doubleword in memory', '']],
            'LDEORA':[['Atomic exclusive OR on word or doubleword in memory', '']],
            'LDEORAB':[['Atomic exclusive OR on byte in memory', '']],
            'LDEORAH':[['Atomic exclusive OR on halfword in memory', '']],
            'LDEORAL':[['Atomic exclusive OR on word or doubleword in memory', '']],
            'LDEORALB':[['Atomic exclusive OR on byte in memory', '']],
            'LDEORALH':[['Atomic exclusive OR on halfword in memory', '']],
            'LDEORB':[['Atomic exclusive OR on byte in memory', '']],
            'LDEORH':[['Atomic exclusive OR on halfword in memory', '']],
            'LDEORL':[['Atomic exclusive OR on word or doubleword in memory', '']],
            'LDEORLB':[['Atomic exclusive OR on byte in memory', '']],
            'LDEORLH':[['Atomic exclusive OR on halfword in memory', '']],
            'LDG':[['Load Allocation Tag', '']],
            'LDGV':[['Load Allocation Tag', '']],
            'LDLAR':[['Load LOAcquire Register', '']],
            'LDLARB':[['Load LOAcquire Register Byte', '']],
            'LDLARH':[['Load LOAcquire Register Halfword', '']],
            'LDNP':[['Load Pair of Registers, with non-temporal hint', '']],
            'LDP':[['Load Pair of Registers', '']],
            'LDPSW':[['Load Pair of Registers Signed Word', '']],
            'LDR':[['Load Register (immediate)', '(immediate)'], ['Load Register (literal)', '(literal)'], ['Load Register (register)', '(register)']],
            'LDRAA':[['Load Register, with pointer authentication', '']],
            'LDRAB':[['Load Register, with pointer authentication', '']],
            'LDRB':[['Load Register Byte (immediate)', '(immediate)'], ['Load Register Byte (register)', '(register)']],
            'LDRH':[['Load Register Halfword (immediate)', '(immediate)'], ['Load Register Halfword (register)', '(register)']],
            'LDRSB':[['Load Register Signed Byte (immediate)', '(immediate)'], ['Load Register Signed Byte (register)', '(register)']],
            'LDRSH':[['Load Register Signed Halfword (immediate)', '(immediate)'], ['Load Register Signed Halfword (register)', '(register)']],
            'LDRSW':[['Load Register Signed Word (literal)', '(literal)'], ['Load Register Signed Word (register)', '(register)'], ['Load Register Signed Word (immediate)', '(immediate)']],
            'LDSET':[['Atomic bit set on word or doubleword in memory', '']],
            'LDSETA':[['Atomic bit set on word or doubleword in memory', '']],
            'LDSETAB':[['Atomic bit set on byte in memory', '']],
            'LDSETAH':[['Atomic bit set on halfword in memory', '']],
            'LDSETAL':[['Atomic bit set on word or doubleword in memory', '']],
            'LDSETALB':[['Atomic bit set on byte in memory', '']],
            'LDSETALH':[['Atomic bit set on halfword in memory', '']],
            'LDSETB':[['Atomic bit set on byte in memory', '']],
            'LDSETH':[['Atomic bit set on halfword in memory', '']],
            'LDSETL':[['Atomic bit set on word or doubleword in memory', '']],
            'LDSETLB':[['Atomic bit set on byte in memory', '']],
            'LDSETLH':[['Atomic bit set on halfword in memory', '']],
            'LDSMAX':[['Atomic signed maximum on word or doubleword in memory', '']],
            'LDSMAXA':[['Atomic signed maximum on word or doubleword in memory', '']],
            'LDSMAXAB':[['Atomic signed maximum on byte in memory', '']],
            'LDSMAXAH':[['Atomic signed maximum on halfword in memory', '']],
            'LDSMAXAL':[['Atomic signed maximum on word or doubleword in memory', '']],
            'LDSMAXALB':[['Atomic signed maximum on byte in memory', '']],
            'LDSMAXALH':[['Atomic signed maximum on halfword in memory', '']],
            'LDSMAXB':[['Atomic signed maximum on byte in memory', '']],
            'LDSMAXH':[['Atomic signed maximum on halfword in memory', '']],
            'LDSMAXL':[['Atomic signed maximum on word or doubleword in memory', '']],
            'LDSMAXLB':[['Atomic signed maximum on byte in memory', '']],
            'LDSMAXLH':[['Atomic signed maximum on halfword in memory', '']],
            'LDSMIN':[['Atomic signed minimum on word or doubleword in memory', '']],
            'LDSMINA':[['Atomic signed minimum on word or doubleword in memory', '']],
            'LDSMINAB':[['Atomic signed minimum on byte in memory', '']],
            'LDSMINAH':[['Atomic signed minimum on halfword in memory', '']],
            'LDSMINAL':[['Atomic signed minimum on word or doubleword in memory', '']],
            'LDSMINALB':[['Atomic signed minimum on byte in memory', '']],
            'LDSMINALH':[['Atomic signed minimum on halfword in memory', '']],
            'LDSMINB':[['Atomic signed minimum on byte in memory', '']],
            'LDSMINH':[['Atomic signed minimum on halfword in memory', '']],
            'LDSMINL':[['Atomic signed minimum on word or doubleword in memory', '']],
            'LDSMINLB':[['Atomic signed minimum on byte in memory', '']],
            'LDSMINLH':[['Atomic signed minimum on halfword in memory', '']],
            'LDTR':[['Load Register (unprivileged)', '']],
            'LDTRB':[['Load Register Byte (unprivileged)', '']],
            'LDTRH':[['Load Register Halfword (unprivileged)', '']],
            'LDTRSB':[['Load Register Signed Byte (unprivileged)', '']],
            'LDTRSH':[['Load Register Signed Halfword (unprivileged)', '']],
            'LDTRSW':[['Load Register Signed Word (unprivileged)', '']],
            'LDUMAX':[['Atomic unsigned maximum on word or doubleword in memory', '']],
            'LDUMAXA':[['Atomic unsigned maximum on word or doubleword in memory', '']],
            'LDUMAXAB':[['Atomic unsigned maximum on byte in memory', '']],
            'LDUMAXAH':[['Atomic unsigned maximum on halfword in memory', '']],
            'LDUMAXAL':[['Atomic unsigned maximum on word or doubleword in memory', '']],
            'LDUMAXALB':[['Atomic unsigned maximum on byte in memory', '']],
            'LDUMAXALH':[['Atomic unsigned maximum on halfword in memory', '']],
            'LDUMAXB':[['Atomic unsigned maximum on byte in memory', '']],
            'LDUMAXH':[['Atomic unsigned maximum on halfword in memory', '']],
            'LDUMAXL':[['Atomic unsigned maximum on word or doubleword in memory', '']],
            'LDUMAXLB':[['Atomic unsigned maximum on byte in memory', '']],
            'LDUMAXLH':[['Atomic unsigned maximum on halfword in memory', '']],
            'LDUMIN':[['Atomic unsigned minimum on word or doubleword in memory', '']],
            'LDUMINA':[['Atomic unsigned minimum on word or doubleword in memory', '']],
            'LDUMINAB':[['Atomic unsigned minimum on byte in memory', '']],
            'LDUMINAH':[['Atomic unsigned minimum on halfword in memory', '']],
            'LDUMINAL':[['Atomic unsigned minimum on word or doubleword in memory', '']],
            'LDUMINALB':[['Atomic unsigned minimum on byte in memory', '']],
            'LDUMINALH':[['Atomic unsigned minimum on halfword in memory', '']],
            'LDUMINB':[['Atomic unsigned minimum on byte in memory', '']],
            'LDUMINH':[['Atomic unsigned minimum on halfword in memory', '']],
            'LDUMINL':[['Atomic unsigned minimum on word or doubleword in memory', '']],
            'LDUMINLB':[['Atomic unsigned minimum on byte in memory', '']],
            'LDUMINLH':[['Atomic unsigned minimum on halfword in memory', '']],
            'LDUR':[['Load Register (unscaled)', '']],
            'LDURB':[['Load Register Byte (unscaled)', '']],
            'LDURH':[['Load Register Halfword (unscaled)', '']],
            'LDURSB':[['Load Register Signed Byte (unscaled)', '']],
            'LDURSH':[['Load Register Signed Halfword (unscaled)', '']],
            'LDURSW':[['Load Register Signed Word (unscaled)', '']],
            'LDXP':[['Load Exclusive Pair of Registers', '']],
            'LDXR':[['Load Exclusive Register', '']],
            'LDXRB':[['Load Exclusive Register Byte', '']],
            'LDXRH':[['Load Exclusive Register Halfword', '']],
            'LSL':[['Logical Shift Left (immediate)', '(immediate)'], ['Logical Shift Left (register)', '(register)']],
            'LSLV':[['Logical Shift Left Variable', '']],
            'LSR':[['Logical Shift Right (immediate)', '(immediate)'], ['Logical Shift Right (register)', '(register)']],
            'LSRV':[['Logical Shift Right Variable', '']],
            'MADD':[['Multiply-Add', '']],
            'MNEG':[['Multiply-Negate', '']],
            'MOV':[['Move (bitmask immediate)', '(bitmask immediate)'], ['Move (inverted wide immediate)', '(inverted wide immediate)'], ['Move (register)', '(register)'], ['Move between register and stack pointer', '(to/from SP)'], ['Move (wide immediate)', '(wide immediate)']],
            'MOVK':[['Move wide with keep', '']],
            'MOVN':[['Move wide with NOT', '']],
            'MOVZ':[['Move wide with zero', '']],
            'MRS':[['Move System Register', '']],
            'MSR':[['Move immediate value to Special Register', '(immediate)'], ['Move general-purpose register to System Register', '(register)']],
            'MSUB':[['Multiply-Subtract', '']],
            'MUL':[['Multiply', '']],
            'MVN':[['Bitwise NOT', '']],
            'NEG':[['Negate (shifted register)', '(shifted register)']],
            'NEGS':[['Negate, setting flags', '']],
            'NGC':[['Negate with Carry', '']],
            'NGCS':[['Negate with Carry, setting flags', '']],
            'NOP':[['No Operation', '']],
            'ORN':[['Bitwise OR NOT (shifted register)', '(shifted register)']],
            'ORR':[['Bitwise OR (immediate)', '(immediate)'], ['Bitwise OR (shifted register)', '(shifted register)']],
            'PACDA':[['Pointer Authentication Code for Data address, using key A', '']],
            'PACDB':[['Pointer Authentication Code for Data address, using key B', '']],
            'PACDZA':[['Pointer Authentication Code for Data address, using key A', '']],
            'PACDZB':[['Pointer Authentication Code for Data address, using key B', '']],
            'PACGA':[['Pointer Authentication Code, using Generic key', '']],
            'PACIA':[['Pointer Authentication Code for Instruction address, using key A', '']],
            'PACIA1716':[['Pointer Authentication Code for Instruction address, using key A', '']],
            'PACIASP':[['Pointer Authentication Code for Instruction address, using key A', '']],
            'PACIAZ':[['Pointer Authentication Code for Instruction address, using key A', '']],
            'PACIB':[['Pointer Authentication Code for Instruction address, using key B', '']],
            'PACIB1716':[['Pointer Authentication Code for Instruction address, using key B', '']],
            'PACIBSP':[['Pointer Authentication Code for Instruction address, using key B', '']],
            'PACIBZ':[['Pointer Authentication Code for Instruction address, using key B', '']],
            'PACIZA':[['Pointer Authentication Code for Instruction address, using key A', '']],
            'PACIZB':[['Pointer Authentication Code for Instruction address, using key B', '']],
            'PRFM':[['Prefetch Memory (immediate)', '(immediate)'], ['Prefetch Memory (literal)', '(literal)'], ['Prefetch Memory (register)', '(register)'], ['Prefetch Memory (unscaled offset)', '(unscaled offset)']],
            'PRFUM':[['Prefetch Memory (unscaled offset)', '(unscaled offset)']],
            'PSB CSYNC':[['Profiling Synchronization Barrier', '']],
            'PSSBB':[['Physical Speculative Store Bypass Barrier', '']],
            'RBIT':[['Reverse Bits', '']],
            'RET':[['Return from subroutine', '']],
            'RETAA':[['Return from subroutine, with pointer authentication', '']],
            'RETAB':[['Return from subroutine, with pointer authentication', '']],
            'REV':[['Reverse Bytes', '']],
            'REV16':[['Reverse bytes in 16-bit halfwords', '']],
            'REV32':[['Reverse bytes in 32-bit words', '']],
            'REV64':[['Reverse Bytes', '']],
            'RMIF':[['Rotate, Mask Insert Flags', '']],
            'ROR':[['Rotate right (immediate)', '(immediate)'], ['Rotate Right (register)', '(register)']],
            'RORV':[['Rotate Right Variable', '']],
            'SB':[['Speculation Barrier', '']],
            'SBC':[['Subtract with Carry', '']],
            'SBCS':[['Subtract with Carry, setting flags', '']],
            'SBFIZ':[['Signed Bitfield Insert in Zero', '']],
            'SBFM':[['Signed Bitfield Move', '']],
            'SBFX':[['Signed Bitfield Extract', '']],
            'SDIV':[['Signed Divide', '']],
            'SETF16':[['Evaluation of 8 or 16 bit flag values', '']],
            'SETF8':[['Evaluation of 8 or 16 bit flag values', '']],
            'SEV':[['Send Event', '']],
            'SEVL':[['Send Event Local', '']],
            'SMADDL':[['Signed Multiply-Add Long', '']],
            'SMC':[['Secure Monitor Call', '']],
            'SMNEGL':[['Signed Multiply-Negate Long', '']],
            'SMSUBL':[['Signed Multiply-Subtract Long', '']],
            'SMULH':[['Signed Multiply High', '']],
            'SMULL':[['Signed Multiply Long', '']],
            'SSBB':[['Speculative Store Bypass Barrier', '']],
            'ST2G':[['Store Allocation Tags', '']],
            'STADD':[['Atomic add on word or doubleword in memory, without return', '']],
            'STADDB':[['Atomic add on byte in memory, without return', '']],
            'STADDH':[['Atomic add on halfword in memory, without return', '']],
            'STADDL':[['Atomic add on word or doubleword in memory, without return', '']],
            'STADDLB':[['Atomic add on byte in memory, without return', '']],
            'STADDLH':[['Atomic add on halfword in memory, without return', '']],
            'STCLR':[['Atomic bit clear on word or doubleword in memory, without return', '']],
            'STCLRB':[['Atomic bit clear on byte in memory, without return', '']],
            'STCLRH':[['Atomic bit clear on halfword in memory, without return', '']],
            'STCLRL':[['Atomic bit clear on word or doubleword in memory, without return', '']],
            'STCLRLB':[['Atomic bit clear on byte in memory, without return', '']],
            'STCLRLH':[['Atomic bit clear on halfword in memory, without return', '']],
            'STEOR':[['Atomic exclusive OR on word or doubleword in memory, without return', '']],
            'STEORB':[['Atomic exclusive OR on byte in memory, without return', '']],
            'STEORH':[['Atomic exclusive OR on halfword in memory, without return', '']],
            'STEORL':[['Atomic exclusive OR on word or doubleword in memory, without return', '']],
            'STEORLB':[['Atomic exclusive OR on byte in memory, without return', '']],
            'STEORLH':[['Atomic exclusive OR on halfword in memory, without return', '']],
            'STG':[['Store Allocation Tag', '']],
            'STGP':[['Store Allocation Tag and Pair of registers', '']],
            'STGV':[['Store Tag Vector', '']],
            'STLLR':[['Store LORelease Register', '']],
            'STLLRB':[['Store LORelease Register Byte', '']],
            'STLLRH':[['Store LORelease Register Halfword', '']],
            'STLR':[['Store-Release Register', '']],
            'STLRB':[['Store-Release Register Byte', '']],
            'STLRH':[['Store-Release Register Halfword', '']],
            'STLUR':[['Store-Release Register (unscaled)', '']],
            'STLURB':[['Store-Release Register Byte (unscaled)', '']],
            'STLURH':[['Store-Release Register Halfword (unscaled)', '']],
            'STLXP':[['Store-Release Exclusive Pair of registers', '']],
            'STLXR':[['Store-Release Exclusive Register', '']],
            'STLXRB':[['Store-Release Exclusive Register Byte', '']],
            'STLXRH':[['Store-Release Exclusive Register Halfword', '']],
            'STNP':[['Store Pair of Registers, with non-temporal hint', '']],
            'STP':[['Store Pair of Registers', '']],
            'STR':[['Store Register (immediate)', '(immediate)'], ['Store Register (register)', '(register)']],
            'STRB':[['Store Register Byte (immediate)', '(immediate)'], ['Store Register Byte (register)', '(register)']],
            'STRH':[['Store Register Halfword (immediate)', '(immediate)'], ['Store Register Halfword (register)', '(register)']],
            'STSET':[['Atomic bit set on word or doubleword in memory, without return', '']],
            'STSETB':[['Atomic bit set on byte in memory, without return', '']],
            'STSETH':[['Atomic bit set on halfword in memory, without return', '']],
            'STSETL':[['Atomic bit set on word or doubleword in memory, without return', '']],
            'STSETLB':[['Atomic bit set on byte in memory, without return', '']],
            'STSETLH':[['Atomic bit set on halfword in memory, without return', '']],
            'STSMAX':[['Atomic signed maximum on word or doubleword in memory, without return', '']],
            'STSMAXB':[['Atomic signed maximum on byte in memory, without return', '']],
            'STSMAXH':[['Atomic signed maximum on halfword in memory, without return', '']],
            'STSMAXL':[['Atomic signed maximum on word or doubleword in memory, without return', '']],
            'STSMAXLB':[['Atomic signed maximum on byte in memory, without return', '']],
            'STSMAXLH':[['Atomic signed maximum on halfword in memory, without return', '']],
            'STSMIN':[['Atomic signed minimum on word or doubleword in memory, without return', '']],
            'STSMINB':[['Atomic signed minimum on byte in memory, without return', '']],
            'STSMINH':[['Atomic signed minimum on halfword in memory, without return', '']],
            'STSMINL':[['Atomic signed minimum on word or doubleword in memory, without return', '']],
            'STSMINLB':[['Atomic signed minimum on byte in memory, without return', '']],
            'STSMINLH':[['Atomic signed minimum on halfword in memory, without return', '']],
            'STTR':[['Store Register (unprivileged)', '']],
            'STTRB':[['Store Register Byte (unprivileged)', '']],
            'STTRH':[['Store Register Halfword (unprivileged)', '']],
            'STUMAX':[['Atomic unsigned maximum on word or doubleword in memory, without return', '']],
            'STUMAXB':[['Atomic unsigned maximum on byte in memory, without return', '']],
            'STUMAXH':[['Atomic unsigned maximum on halfword in memory, without return', '']],
            'STUMAXL':[['Atomic unsigned maximum on word or doubleword in memory, without return', '']],
            'STUMAXLB':[['Atomic unsigned maximum on byte in memory, without return', '']],
            'STUMAXLH':[['Atomic unsigned maximum on halfword in memory, without return', '']],
            'STUMIN':[['Atomic unsigned minimum on word or doubleword in memory, without return', '']],
            'STUMINB':[['Atomic unsigned minimum on byte in memory, without return', '']],
            'STUMINH':[['Atomic unsigned minimum on halfword in memory, without return', '']],
            'STUMINL':[['Atomic unsigned minimum on word or doubleword in memory, without return', '']],
            'STUMINLB':[['Atomic unsigned minimum on byte in memory, without return', '']],
            'STUMINLH':[['Atomic unsigned minimum on halfword in memory, without return', '']],
            'STUR':[['Store Register (unscaled)', '']],
            'STURB':[['Store Register Byte (unscaled)', '']],
            'STURH':[['Store Register Halfword (unscaled)', '']],
            'STXP':[['Store Exclusive Pair of registers', '']],
            'STXR':[['Store Exclusive Register', '']],
            'STXRB':[['Store Exclusive Register Byte', '']],
            'STXRH':[['Store Exclusive Register Halfword', '']],
            'STZ2G':[['Store Allocation Tags, Zeroing', '']],
            'STZG':[['Store Allocation Tag, Zeroing', '']],
            'SUB':[['Subtract (extended register)', '(extended register)'], ['Subtract (immediate)', '(immediate)'], ['Subtract (shifted register)', '(shifted register)']],
            'SUBG':[['Subtract with Tag', '']],
            'SUBP':[['Subtract Pointer', '']],
            'SUBPS':[['Subtract Pointer, setting Flags', '']],
            'SUBS':[['Subtract (extended register), setting flags', '(extended register)'], ['Subtract (immediate), setting flags', '(immediate)'], ['Subtract (shifted register), setting flags', '(shifted register)']],
            'SVC':[['Supervisor Call', '']],
            'SWP':[['Swap word or doubleword in memory', '']],
            'SWPA':[['Swap word or doubleword in memory', '']],
            'SWPAB':[['Swap byte in memory', '']],
            'SWPAH':[['Swap halfword in memory', '']],
            'SWPAL':[['Swap word or doubleword in memory', '']],
            'SWPALB':[['Swap byte in memory', '']],
            'SWPALH':[['Swap halfword in memory', '']],
            'SWPB':[['Swap byte in memory', '']],
            'SWPH':[['Swap halfword in memory', '']],
            'SWPL':[['Swap word or doubleword in memory', '']],
            'SWPLB':[['Swap byte in memory', '']],
            'SWPLH':[['Swap halfword in memory', '']],
            'SXTB':[['Signed Extend Byte', '']],
            'SXTH':[['Sign Extend Halfword', '']],
            'SXTW':[['Sign Extend Word', '']],
            'SYS':[['System instruction', '']],
            'SYSL':[['System instruction with result', '']],
            'TBNZ':[['Test bit and Branch if Nonzero', '']],
            'TBZ':[['Test bit and Branch if Zero', '']],
            'TLBI':[['TLB Invalidate operation', '']],
            'TSB CSYNC':[['Trace Synchronization Barrier', '']],
            'TST':[['Test bits (immediate)', '(immediate)'], ['Test (shifted register)', '(shifted register)']],
            'UBFIZ':[['Unsigned Bitfield Insert in Zero', '']],
            'UBFM':[['Unsigned Bitfield Move', '']],
            'UBFX':[['Unsigned Bitfield Extract', '']],
            'UDF':[['Permanently Undefined', '']],
            'UDIV':[['Unsigned Divide', '']],
            'UMADDL':[['Unsigned Multiply-Add Long', '']],
            'UMNEGL':[['Unsigned Multiply-Negate Long', '']],
            'UMSUBL':[['Unsigned Multiply-Subtract Long', '']],
            'UMULH':[['Unsigned Multiply High', '']],
            'UMULL':[['Unsigned Multiply Long', '']],
            'UXTB':[['Unsigned Extend Byte', '']],
            'UXTH':[['Unsigned Extend Halfword', '']],
            'WFE':[['Wait For Event', '']],
            'WFI':[['Wait For Interrupt', '']],
            'XAFlag':[['Convert floating-point condition flags from external format to ARM format', '']],
            'XPACD':[['Strip Pointer Authentication Code', '']],
            'XPACI':[['Strip Pointer Authentication Code', '']],
            'XPACLRI':[['Strip Pointer Authentication Code', '']],
            'YIELD':[['YIELD', '']]}

ISA_SMID = {'ABS':[['Absolute value (vector)', '']],
            'ADD':[['Add (vector)', '(vector)']],
            'ADDHN':[['Add returning High Narrow', '']],
            'ADDHN2':[['Add returning High Narrow', '']],
            'ADDP':[['Add Pair of elements (scalar)', '(scalar)'], ['Add Pairwise (vector)', '(vector)']],
            'ADDV':[['Add across Vector', '']],
            'AESD':[['AES single round decryption', '']],
            'AESE':[['AES single round encryption', '']],
            'AESIMC':[['AES inverse mix columns', '']],
            'AESMC':[['AES mix columns', '']],
            'AND':[['Bitwise AND (vector)', '(vector)']],
            'BCAX':[['Bit Clear and XOR', '']],
            'BIC':[['Bitwise bit Clear (vector, immediate)', '(vector, immediate)'], ['Bitwise bit Clear (vector, register)', '(vector, register)']],
            'BIF':[['Bitwise Insert if False', '']],
            'BIT':[['Bitwise Insert if True', '']],
            'BSL':[['Bitwise Select', '']],
            'CLS':[['Count Leading Sign bits (vector)', '(vector)']],
            'CLZ':[['Count Leading Zero bits (vector)', '(vector)']],
            'CMEQ':[['Compare bitwise Equal (vector)', '(register)'], ['Compare bitwise Equal to zero (vector)', '(zero)']],
            'CMGE':[['Compare signed Greater than or Equal (vector)', '(register)'], ['Compare signed Greater than or Equal to zero (vector)', '(zero)']],
            'CMGT':[['Compare signed Greater than (vector)', '(register)'], ['Compare signed Greater than zero (vector)', '(zero)']],
            'CMHI':[['Compare unsigned Higher (vector)', '(register)']],
            'CMHS':[['Compare unsigned Higher or Same (vector)', '(register)']],
            'CMLE':[['Compare signed Less than or Equal to zero (vector)', '(zero)']],
            'CMLT':[['Compare signed Less than zero (vector)', '(zero)']],
            'CMTST':[['Compare bitwise Test bits nonzero (vector)', '']],
            'CNT':[['Population Count per byte', '']],
            'DUP':[['Duplicate vector element to vector or scalar', '(element)'], ['Duplicate general-purpose register to vector', '(general)']],
            'EOR':[['Bitwise Exclusive OR (vector)', '(vector)']],
            'EOR3':[['Three-way Exclusive OR', '']],
            'EXT':[['Extract vector from pair of vectors', '']],
            'FABD':[['Floating-point Absolute Difference (vector)', '']],
            'FABS':[['Floating-point Absolute value (scalar)', '(scalar)'], ['Floating-point Absolute value (vector)', '(vector)']],
            'FACGE':[['Floating-point Absolute Compare Greater than or Equal (vector)', '']],
            'FACGT':[['Floating-point Absolute Compare Greater than (vector)', '']],
            'FADD':[['Floating-point Add (scalar)', '(scalar)'], ['Floating-point Add (vector)', '(vector)']],
            'FADDP':[['Floating-point Add Pair of elements (scalar)', '(scalar)'], ['Floating-point Add Pairwise (vector)', '(vector)']],
            'FCADD':[['Floating-point Complex Add', '']],
            'FCCMP':[['Floating-point Conditional quiet Compare (scalar)', '']],
            'FCCMPE':[['Floating-point Conditional signaling Compare (scalar)', '']],
            'FCMEQ':[['Floating-point Compare Equal (vector)', '(register)'], ['Floating-point Compare Equal to zero (vector)', '(zero)']],
            'FCMGE':[['Floating-point Compare Greater than or Equal (vector)', '(register)'], ['Floating-point Compare Greater than or Equal to zero (vector)', '(zero)']],
            'FCMGT':[['Floating-point Compare Greater than (vector)', '(register)'], ['Floating-point Compare Greater than zero (vector)', '(zero)']],
            'FCMLA':[['Floating-point Complex Multiply Accumulate', ''], ['Floating-point Complex Multiply Accumulate (by element)', '(by element)']],
            'FCMLE':[['Floating-point Compare Less than or Equal to zero (vector)', '(zero)']],
            'FCMLT':[['Floating-point Compare Less than zero (vector)', '(zero)']],
            'FCMP':[['Floating-point quiet Compare (scalar)', '']],
            'FCMPE':[['Floating-point signaling Compare (scalar)', '']],
            'FCSEL':[['Floating-point Conditional Select (scalar)', '']],
            'FCVT':[['Floating-point Convert precision (scalar)', '']],
            'FCVTAS':[['Floating-point Convert to Signed integer, rounding to nearest with ties to Away (scalar)', '(scalar)'], ['Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector)', '(vector)']],
            'FCVTAU':[['Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (scalar)', '(scalar)'], ['Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector)', '(vector)']],
            'FCVTL':[['Floating-point Convert to higher precision Long (vector)', '']],
            'FCVTL2':[['Floating-point Convert to higher precision Long (vector)', '']],
            'FCVTMS':[['Floating-point Convert to Signed integer, rounding toward Minus infinity (scalar)', '(scalar)'], ['Floating-point Convert to Signed integer, rounding toward Minus infinity (vector)', '(vector)']],
            'FCVTMU':[['Floating-point Convert to Unsigned integer, rounding toward Minus infinity (scalar)', '(scalar)'], ['Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector)', '(vector)']],
            'FCVTN':[['Floating-point Convert to lower precision Narrow (vector)', '']],
            'FCVTN2':[['Floating-point Convert to lower precision Narrow (vector)', '']],
            'FCVTNS':[['Floating-point Convert to Signed integer, rounding to nearest with ties to even (scalar)', '(scalar)'], ['Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector)', '(vector)']],
            'FCVTNU':[['Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (scalar)', '(scalar)'], ['Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector)', '(vector)']],
            'FCVTPS':[['Floating-point Convert to Signed integer, rounding toward Plus infinity (scalar)', '(scalar)'], ['Floating-point Convert to Signed integer, rounding toward Plus infinity (vector)', '(vector)']],
            'FCVTPU':[['Floating-point Convert to Unsigned integer, rounding toward Plus infinity (scalar)', '(scalar)'], ['Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector)', '(vector)']],
            'FCVTXN':[['Floating-point Convert to lower precision Narrow, rounding to odd (vector)', '']],
            'FCVTXN2':[['Floating-point Convert to lower precision Narrow, rounding to odd (vector)', '']],
            'FCVTZS':[['Floating-point Convert to Signed fixed-point, rounding toward Zero (scalar)', '(scalar, fixed-point)'], ['Floating-point Convert to Signed integer, rounding toward Zero (scalar)', '(scalar, integer)'], ['Floating-point Convert to Signed fixed-point, rounding toward Zero (vector)', '(vector, fixed-point)'], ['Floating-point Convert to Signed integer, rounding toward Zero (vector)', '(vector, integer)']],
            'FCVTZU':[['Floating-point Convert to Unsigned fixed-point, rounding toward Zero (scalar)', '(scalar, fixed-point)'], ['Floating-point Convert to Unsigned integer, rounding toward Zero (scalar)', '(scalar, integer)'], ['Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector)', '(vector, fixed-point)'], ['Floating-point Convert to Unsigned integer, rounding toward Zero (vector)', '(vector, integer)']],
            'FDIV':[['Floating-point Divide (scalar)', '(scalar)'], ['Floating-point Divide (vector)', '(vector)']],
            'FJCVTZS':[['Floating-point Javascript Convert to Signed fixed-point, rounding toward Zero', '']],
            'FMADD':[['Floating-point fused Multiply-Add (scalar)', '']],
            'FMAX':[['Floating-point Maximum (scalar)', '(scalar)'], ['Floating-point Maximum (vector)', '(vector)']],
            'FMAXNM':[['Floating-point Maximum Number (scalar)', '(scalar)'], ['Floating-point Maximum Number (vector)', '(vector)']],
            'FMAXNMP':[['Floating-point Maximum Number of Pair of elements (scalar)', '(scalar)'], ['Floating-point Maximum Number Pairwise (vector)', '(vector)']],
            'FMAXNMV':[['Floating-point Maximum Number across Vector', '']],
            'FMAXP':[['Floating-point Maximum of Pair of elements (scalar)', '(scalar)'], ['Floating-point Maximum Pairwise (vector)', '(vector)']],
            'FMAXV':[['Floating-point Maximum across Vector', '']],
            'FMIN':[['Floating-point Minimum (scalar)', '(scalar)'], ['Floating-point minimum (vector)', '(vector)']],
            'FMINNM':[['Floating-point Minimum Number (vector)', '(vector)'], ['Floating-point Minimum Number (scalar)', '(scalar)']],
            'FMINNMP':[['Floating-point Minimum Number of Pair of elements (scalar)', '(scalar)'], ['Floating-point Minimum Number Pairwise (vector)', '(vector)']],
            'FMINNMV':[['Floating-point Minimum Number across Vector', '']],
            'FMINP':[['Floating-point Minimum of Pair of elements (scalar)', '(scalar)'], ['Floating-point Minimum Pairwise (vector)', '(vector)']],
            'FMINV':[['Floating-point Minimum across Vector', '']],
            'FMLA':[['Floating-point fused Multiply-Add to accumulator (by element)', '(by element)'], ['Floating-point fused Multiply-Add to accumulator (vector)', '(vector)']],
            'FMLAL':[['Floating-point fused Multiply-Add Long to accumulator (by element)', '(by element)'], ['Floating-point fused Multiply-Add Long to accumulator (vector)', '(vector)']],
            'FMLAL2':[['Floating-point fused Multiply-Add Long to accumulator (by element)', '(by element)'], ['Floating-point fused Multiply-Add Long to accumulator (vector)', '(vector)']],
            'FMLS':[['Floating-point fused Multiply-Subtract from accumulator (by element)', '(by element)'], ['Floating-point fused Multiply-Subtract from accumulator (vector)', '(vector)']],
            'FMLSL':[['Floating-point fused Multiply-Subtract Long from accumulator (by element)', '(by element)'], ['Floating-point fused Multiply-Subtract Long from accumulator (vector)', '(vector)']],
            'FMLSL2':[['Floating-point fused Multiply-Subtract Long from accumulator (by element)', '(by element)'], ['Floating-point fused Multiply-Subtract Long from accumulator (vector)', '(vector)']],
            'FMOV':[['Floating-point Move to or from general-purpose register without conversion', '(general)'], ['Floating-point Move register without conversion', '(register)'], ['Floating-point move immediate (scalar)', '(scalar, immediate)'], ['Floating-point move immediate (vector)', '(vector, immediate)']],
            'FMSUB':[['Floating-point Fused Multiply-Subtract (scalar)', '']],
            'FMUL':[['Floating-point Multiply (by element)', '(by element)'], ['Floating-point Multiply (scalar)', '(scalar)'], ['Floating-point Multiply (vector)', '(vector)']],
            'FMULX':[['Floating-point Multiply extended', ''], ['Floating-point Multiply extended (by element)', '(by element)']],
            'FNEG':[['Floating-point Negate (scalar)', '(scalar)'], ['Floating-point Negate (vector)', '(vector)']],
            'FNMADD':[['Floating-point Negated fused Multiply-Add (scalar)', '']],
            'FNMSUB':[['Floating-point Negated fused Multiply-Subtract (scalar)', '']],
            'FNMUL':[['Floating-point Multiply-Negate (scalar)', '(scalar)']],
            'FRECPE':[['Floating-point Reciprocal Estimate', '']],
            'FRECPS':[['Floating-point Reciprocal Step', '']],
            'FRECPX':[['Floating-point Reciprocal exponent (scalar)', '']],
            'FRINT32X':[['Floating-point Round to 32-bit Integer, using current rounding mode (scalar)', '(scalar)'], ['Floating-point Round to 32-bit Integer, using current rounding mode (vector)', '(vector)']],
            'FRINT32Z':[['Floating-point Round to 32-bit Integer toward Zero (scalar)', '(scalar)'], ['Floating-point Round to 32-bit Integer toward Zero (vector)', '(vector)']],
            'FRINT64X':[['Floating-point Round to 64-bit Integer, using current rounding mode (scalar)', '(scalar)'], ['Floating-point Round to 64-bit Integer, using current rounding mode (vector)', '(vector)']],
            'FRINT64Z':[['Floating-point Round to 64-bit Integer toward Zero (scalar)', '(scalar)'], ['Floating-point Round to 64-bit Integer toward Zero (vector)', '(vector)']],
            'FRINTA':[['Floating-point Round to Integral, to nearest with ties to Away (scalar)', '(scalar)'], ['Floating-point Round to Integral, to nearest with ties to Away (vector)', '(vector)']],
            'FRINTI':[['Floating-point Round to Integral, using current rounding mode (scalar)', '(scalar)'], ['Floating-point Round to Integral, using current rounding mode (vector)', '(vector)']],
            'FRINTM':[['Floating-point Round to Integral, toward Minus infinity (scalar)', '(scalar)'], ['Floating-point Round to Integral, toward Minus infinity (vector)', '(vector)']],
            'FRINTN':[['Floating-point Round to Integral, to nearest with ties to even (scalar)', '(scalar)'], ['Floating-point Round to Integral, to nearest with ties to even (vector)', '(vector)']],
            'FRINTP':[['Floating-point Round to Integral, toward Plus infinity (scalar)', '(scalar)'], ['Floating-point Round to Integral, toward Plus infinity (vector)', '(vector)']],
            'FRINTX':[['Floating-point Round to Integral exact, using current rounding mode (scalar)', '(scalar)'], ['Floating-point Round to Integral exact, using current rounding mode (vector)', '(vector)']],
            'FRINTZ':[['Floating-point Round to Integral, toward Zero (scalar)', '(scalar)'], ['Floating-point Round to Integral, toward Zero (vector)', '(vector)']],
            'FRSQRTE':[['Floating-point Reciprocal Square Root Estimate', '']],
            'FRSQRTS':[['Floating-point Reciprocal Square Root Step', '']],
            'FSQRT':[['Floating-point Square Root (scalar)', '(scalar)'], ['Floating-point Square Root (vector)', '(vector)']],
            'FSUB':[['Floating-point Subtract (scalar)', '(scalar)'], ['Floating-point Subtract (vector)', '(vector)']],
            'INS':[['Insert vector element from another vector element', '(element)'], ['Insert vector element from general-purpose register', '(general)']],
            'LD1':[['Load multiple single-element structures to one, two, three, or four registers', '(multiple structures)'], ['Load one single-element structure to one lane of one register', '(single structure)']],
            'LD1R':[['Load one single-element structure and Replicate to all lanes (of one register)', '']],
            'LD2':[['Load multiple 2-element structures to two registers', '(multiple structures)'], ['Load single 2-element structure to one lane of two registers', '(single structure)']],
            'LD2R':[['Load single 2-element structure and Replicate to all lanes of two registers', '']],
            'LD3':[['Load multiple 3-element structures to three registers', '(multiple structures)'], ['Load single 3-element structure to one lane of three registers)', '(single structure)']],
            'LD3R':[['Load single 3-element structure and Replicate to all lanes of three registers', '']],
            'LD4':[['Load multiple 4-element structures to four registers', '(multiple structures)'], ['Load single 4-element structure to one lane of four registers', '(single structure)']],
            'LD4R':[['Load single 4-element structure and Replicate to all lanes of four registers', '']],
            'LDNP':[['Load Pair of SIMD&FP registers, with Non-temporal hint', '(SIMD&FP)']],
            'LDP':[['Load Pair of SIMD&FP registers', '(SIMD&FP)']],
            'LDR':[['Load SIMD&FP Register (immediate offset)', '(immediate, SIMD&FP)'], ['Load SIMD&FP Register (PC-relative literal)', '(literal, SIMD&FP)'], ['Load SIMD&FP Register (register offset)', '(register, SIMD&FP)']],
            'LDUR':[['Load SIMD&FP Register (unscaled offset)', '(SIMD&FP)']],
            'MLA':[['Multiply-Add to accumulator (vector, by element)', '(by element)'], ['Multiply-Add to accumulator (vector)', '(vector)']],
            'MLS':[['Multiply-Subtract from accumulator (vector, by element)', '(by element)'], ['Multiply-Subtract from accumulator (vector)', '(vector)']],
            'MOV':[['Move vector element to another vector element', '(element)'], ['Move general-purpose register to a vector element', '(from general)'], ['Move vector element to scalar', '(scalar)'], ['Move vector element to general-purpose register', '(to general)'], ['Move vector', '(vector)']],
            'MOVI':[['Move Immediate (vector)', '']],
            'MUL':[['Multiply (vector, by element)', '(by element)'], ['Multiply (vector)', '(vector)']],
            'MVN':[['Bitwise NOT (vector)', '']],
            'MVNI':[['Move inverted Immediate (vector)', '']],
            'NEG':[['Negate (vector)', '(vector)']],
            'NOT':[['Bitwise NOT (vector)', '']],
            'ORN':[['Bitwise inclusive OR NOT (vector)', '(vector)']],
            'ORR':[['Bitwise inclusive OR (vector, immediate)', '(vector, immediate)'], ['Bitwise inclusive OR (vector, register)', '(vector, register)']],
            'PMUL':[['Polynomial Multiply', '']],
            'PMULL':[['Polynomial Multiply Long', '']],
            'PMULL2':[['Polynomial Multiply Long', '']],
            'RADDHN':[['Rounding Add returning High Narrow', '']],
            'RADDHN2':[['Rounding Add returning High Narrow', '']],
            'RAX1':[['Rotate and Exclusive OR', '']],
            'RBIT':[['Reverse Bit order (vector)', '(vector)']],
            'REV16':[['Reverse elements in 16-bit halfwords (vector)', '(vector)']],
            'REV32':[['Reverse elements in 32-bit words (vector)', '(vector)']],
            'REV64':[['Reverse elements in 64-bit doublewords (vector)', '']],
            'RSHRN':[['Rounding Shift Right Narrow (immediate)', '']],
            'RSHRN2':[['Rounding Shift Right Narrow (immediate)', '']],
            'RSUBHN':[['Rounding Subtract returning High Narrow', '']],
            'RSUBHN2':[['Rounding Subtract returning High Narrow', '']],
            'SABA':[['Signed Absolute difference and Accumulate', '']],
            'SABAL':[['Signed Absolute difference and Accumulate Long', '']],
            'SABAL2':[['Signed Absolute difference and Accumulate Long', '']],
            'SABD':[['Signed Absolute Difference', '']],
            'SABDL':[['Signed Absolute Difference Long', '']],
            'SABDL2':[['Signed Absolute Difference Long', '']],
            'SADALP':[['Signed Add and Accumulate Long Pairwise', '']],
            'SADDL':[['Signed Add Long (vector)', '']],
            'SADDL2':[['Signed Add Long (vector)', '']],
            'SADDLP':[['Signed Add Long Pairwise', '']],
            'SADDLV':[['Signed Add Long across Vector', '']],
            'SADDW':[['Signed Add Wide', '']],
            'SADDW2':[['Signed Add Wide', '']],
            'SCVTF':[['Signed fixed-point Convert to Floating-point (scalar)', '(scalar, fixed-point)'], ['Signed integer Convert to Floating-point (scalar)', '(scalar, integer)'], ['Signed fixed-point Convert to Floating-point (vector)', '(vector, fixed-point)'], ['Signed integer Convert to Floating-point (vector)', '(vector, integer)']],
            'SDOT':[['Dot Product signed arithmetic (vector, by element)', '(by element)'], ['Dot Product signed arithmetic (vector)', '(vector)']],
            'SHA1C':[['SHA1 hash update (choose)', '']],
            'SHA1H':[['SHA1 fixed rotate', '']],
            'SHA1M':[['SHA1 hash update (majority)', '']],
            'SHA1P':[['SHA1 hash update (parity)', '']],
            'SHA1SU0':[['SHA1 schedule update 0', '']],
            'SHA1SU1':[['SHA1 schedule update 1', '']],
            'SHA256H':[['SHA256 hash update (part 1)', '']],
            'SHA256H2':[['SHA256 hash update (part 2)', '']],
            'SHA256SU0':[['SHA256 schedule update 0', '']],
            'SHA256SU1':[['SHA256 schedule update 1', '']],
            'SHA512H':[['SHA512 Hash update part 1', '']],
            'SHA512H2':[['SHA512 Hash update part 2', '']],
            'SHA512SU0':[['SHA512 Schedule Update 0', '']],
            'SHA512SU1':[['SHA512 Schedule Update 1', '']],
            'SHADD':[['Signed Halving Add', '']],
            'SHL':[['Shift Left (immediate)', '']],
            'SHLL':[['Shift Left Long (by element size)', '']],
            'SHLL2':[['Shift Left Long (by element size)', '']],
            'SHRN':[['Shift Right Narrow (immediate)', '']],
            'SHRN2':[['Shift Right Narrow (immediate)', '']],
            'SHSUB':[['Signed Halving Subtract', '']],
            'SLI':[['Shift Left and Insert (immediate)', '']],
            'SM3PARTW1':[['SM3PARTW1', '']],
            'SM3PARTW2':[['SM3PARTW2', '']],
            'SM3SS1':[['SM3SS1', '']],
            'SM3TT1A':[['SM3TT1A', '']],
            'SM3TT1B':[['SM3TT1B', '']],
            'SM3TT2A':[['SM3TT2A', '']],
            'SM3TT2B':[['SM3TT2B', '']],
            'SM4E':[['SM4 Encode', '']],
            'SM4EKEY':[['SM4 Key', '']],
            'SMAX':[['Signed Maximum (vector)', '']],
            'SMAXP':[['Signed Maximum Pairwise', '']],
            'SMAXV':[['Signed Maximum across Vector', '']],
            'SMIN':[['Signed Minimum (vector)', '']],
            'SMINP':[['Signed Minimum Pairwise', '']],
            'SMINV':[['Signed Minimum across Vector', '']],
            'SMLAL':[['Signed Multiply-Add Long (vector, by element)', '(by element)'], ['Signed Multiply-Add Long (vector)', '(vector)']],
            'SMLAL2':[['Signed Multiply-Add Long (vector, by element)', '(by element)'], ['Signed Multiply-Add Long (vector)', '(vector)']],
            'SMLSL':[['Signed Multiply-Subtract Long (vector, by element)', '(by element)'], ['Signed Multiply-Subtract Long (vector)', '(vector)']],
            'SMLSL2':[['Signed Multiply-Subtract Long (vector, by element)', '(by element)'], ['Signed Multiply-Subtract Long (vector)', '(vector)']],
            'SMOV':[['Signed Move vector element to general-purpose register', '']],
            'SMULL':[['Signed Multiply Long (vector, by element)', '(by element)'], ['Signed Multiply Long (vector)', '(vector)']],
            'SMULL2':[['Signed Multiply Long (vector, by element)', '(by element)'], ['Signed Multiply Long (vector)', '(vector)']],
            'SQABS':[['Signed saturating Absolute value', '']],
            'SQADD':[['Signed saturating Add', '']],
            'SQDMLAL':[['Signed saturating Doubling Multiply-Add Long (by element)', '(by element)'], ['Signed saturating Doubling Multiply-Add Long', '(vector)']],
            'SQDMLAL2':[['Signed saturating Doubling Multiply-Add Long (by element)', '(by element)'], ['Signed saturating Doubling Multiply-Add Long', '(vector)']],
            'SQDMLSL':[['Signed saturating Doubling Multiply-Subtract Long (by element)', '(by element)'], ['Signed saturating Doubling Multiply-Subtract Long', '(vector)']],
            'SQDMLSL2':[['Signed saturating Doubling Multiply-Subtract Long (by element)', '(by element)'], ['Signed saturating Doubling Multiply-Subtract Long', '(vector)']],
            'SQDMULH':[['Signed saturating Doubling Multiply returning High half (by element)', '(by element)'], ['Signed saturating Doubling Multiply returning High half', '(vector)']],
            'SQDMULL':[['Signed saturating Doubling Multiply Long (by element)', '(by element)'], ['Signed saturating Doubling Multiply Long', '(vector)']],
            'SQDMULL2':[['Signed saturating Doubling Multiply Long (by element)', '(by element)'], ['Signed saturating Doubling Multiply Long', '(vector)']],
            'SQNEG':[['Signed saturating Negate', '']],
            'SQRDMLAH':[['Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (by element)', '(by element)'], ['Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector)', '(vector)']],
            'SQRDMLSH':[['Signed Saturating Rounding Doubling Multiply Subtract returning High Half (by element)', '(by element)'], ['Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector)', '(vector)']],
            'SQRDMULH':[['Signed saturating Rounding Doubling Multiply returning High half (by element)', '(by element)'], ['Signed saturating Rounding Doubling Multiply returning High half', '(vector)']],
            'SQRSHL':[['Signed saturating Rounding Shift Left (register)', '']],
            'SQRSHRN':[['Signed saturating Rounded Shift Right Narrow (immediate)', '']],
            'SQRSHRN2':[['Signed saturating Rounded Shift Right Narrow (immediate)', '']],
            'SQRSHRUN':[['Signed saturating Rounded Shift Right Unsigned Narrow (immediate)', '']],
            'SQRSHRUN2':[['Signed saturating Rounded Shift Right Unsigned Narrow (immediate)', '']],
            'SQSHL':[['Signed saturating Shift Left (immediate)', '(immediate)'], ['Signed saturating Shift Left (register)', '(register)']],
            'SQSHLU':[['Signed saturating Shift Left Unsigned (immediate)', '']],
            'SQSHRN':[['Signed saturating Shift Right Narrow (immediate)', '']],
            'SQSHRN2':[['Signed saturating Shift Right Narrow (immediate)', '']],
            'SQSHRUN':[['Signed saturating Shift Right Unsigned Narrow (immediate)', '']],
            'SQSHRUN2':[['Signed saturating Shift Right Unsigned Narrow (immediate)', '']],
            'SQSUB':[['Signed saturating Subtract', '']],
            'SQXTN':[['Signed saturating extract Narrow', '']],
            'SQXTN2':[['Signed saturating extract Narrow', '']],
            'SQXTUN':[['Signed saturating extract Unsigned Narrow', '']],
            'SQXTUN2':[['Signed saturating extract Unsigned Narrow', '']],
            'SRHADD':[['Signed Rounding Halving Add', '']],
            'SRI':[['Shift Right and Insert (immediate)', '']],
            'SRSHL':[['Signed Rounding Shift Left (register)', '']],
            'SRSHR':[['Signed Rounding Shift Right (immediate)', '']],
            'SRSRA':[['Signed Rounding Shift Right and Accumulate (immediate)', '']],
            'SSHL':[['Signed Shift Left (register)', '']],
            'SSHLL':[['Signed Shift Left Long (immediate)', '']],
            'SSHLL2':[['Signed Shift Left Long (immediate)', '']],
            'SSHR':[['Signed Shift Right (immediate)', '']],
            'SSRA':[['Signed Shift Right and Accumulate (immediate)', '']],
            'SSUBL':[['Signed Subtract Long', '']],
            'SSUBL2':[['Signed Subtract Long', '']],
            'SSUBW':[['Signed Subtract Wide', '']],
            'SSUBW2':[['Signed Subtract Wide', '']],
            'ST1':[['Store multiple single-element structures from one, two, three, or four registers', '(multiple structures)'], ['Store a single-element structure from one lane of one register', '(single structure)']],
            'ST2':[['Store multiple 2-element structures from two registers', '(multiple structures)'], ['Store single 2-element structure from one lane of two registers', '(single structure)']],
            'ST3':[['Store multiple 3-element structures from three registers', '(multiple structures)'], ['Store single 3-element structure from one lane of three registers', '(single structure)']],
            'ST4':[['Store multiple 4-element structures from four registers', '(multiple structures)'], ['Store single 4-element structure from one lane of four registers', '(single structure)']],
            'STNP':[['Store Pair of SIMD&FP registers, with Non-temporal hint', '(SIMD&FP)']],
            'STP':[['Store Pair of SIMD&FP registers', '(SIMD&FP)']],
            'STR':[['Store SIMD&FP register (immediate offset)', '(immediate, SIMD&FP)'], ['Store SIMD&FP register (register offset)', '(register, SIMD&FP)']],
            'STUR':[['Store SIMD&FP register (unscaled offset)', '(SIMD&FP)']],
            'SUB':[['Subtract (vector)', '(vector)']],
            'SUBHN':[['Subtract returning High Narrow', '']],
            'SUBHN2':[['Subtract returning High Narrow', '']],
            'SUQADD':[['Signed saturating Accumulate of Unsigned value', '']],
            'SXTL':[['Signed extend Long', '']],
            'SXTL2':[['Signed extend Long', '']],
            'TBL':[['Table vector Lookup', '']],
            'TBX':[['Table vector lookup extension', '']],
            'TRN1':[['Transpose vectors (primary)', '']],
            'TRN2':[['Transpose vectors (secondary)', '']],
            'UABA':[['Unsigned Absolute difference and Accumulate', '']],
            'UABAL':[['Unsigned Absolute difference and Accumulate Long', '']],
            'UABAL2':[['Unsigned Absolute difference and Accumulate Long', '']],
            'UABD':[['Unsigned Absolute Difference (vector)', '']],
            'UABDL':[['Unsigned Absolute Difference Long', '']],
            'UABDL2':[['Unsigned Absolute Difference Long', '']],
            'UADALP':[['Unsigned Add and Accumulate Long Pairwise', '']],
            'UADDL':[['Unsigned Add Long (vector)', '']],
            'UADDL2':[['Unsigned Add Long (vector)', '']],
            'UADDLP':[['Unsigned Add Long Pairwise', '']],
            'UADDLV':[['Unsigned sum Long across Vector', '']],
            'UADDW':[['Unsigned Add Wide', '']],
            'UADDW2':[['Unsigned Add Wide', '']],
            'UCVTF':[['Unsigned fixed-point Convert to Floating-point (scalar)', '(scalar, fixed-point)'], ['Unsigned integer Convert to Floating-point (scalar)', '(scalar, integer)'], ['Unsigned fixed-point Convert to Floating-point (vector)', '(vector, fixed-point)'], ['Unsigned integer Convert to Floating-point (vector)', '(vector, integer)']],
            'UDOT':[['Dot Product unsigned arithmetic (vector, by element)', '(by element)'], ['Dot Product unsigned arithmetic (vector)', '(vector)']],
            'UHADD':[['Unsigned Halving Add', '']],
            'UHSUB':[['Unsigned Halving Subtract', '']],
            'UMAX':[['Unsigned Maximum (vector)', '']],
            'UMAXP':[['Unsigned Maximum Pairwise', '']],
            'UMAXV':[['Unsigned Maximum across Vector', '']],
            'UMIN':[['Unsigned Minimum (vector)', '']],
            'UMINP':[['Unsigned Minimum Pairwise', '']],
            'UMINV':[['Unsigned Minimum across Vector', '']],
            'UMLAL':[['Unsigned Multiply-Add Long (vector, by element)', '(by element)'], ['Unsigned Multiply-Add Long (vector)', '(vector)']],
            'UMLAL2':[['Unsigned Multiply-Add Long (vector, by element)', '(by element)'], ['Unsigned Multiply-Add Long (vector)', '(vector)']],
            'UMLSL':[['Unsigned Multiply-Subtract Long (vector, by element)', '(by element)'], ['Unsigned Multiply-Subtract Long (vector)', '(vector)']],
            'UMLSL2':[['Unsigned Multiply-Subtract Long (vector, by element)', '(by element)'], ['Unsigned Multiply-Subtract Long (vector)', '(vector)']],
            'UMOV':[['Unsigned Move vector element to general-purpose register', '']],
            'UMULL':[['Unsigned Multiply Long (vector, by element)', '(by element)'], ['Unsigned Multiply long (vector)', '(vector)']],
            'UMULL2':[['Unsigned Multiply Long (vector, by element)', '(by element)'], ['Unsigned Multiply long (vector)', '(vector)']],
            'UQADD':[['Unsigned saturating Add', '']],
            'UQRSHL':[['Unsigned saturating Rounding Shift Left (register)', '']],
            'UQRSHRN':[['Unsigned saturating Rounded Shift Right Narrow (immediate)', '']],
            'UQRSHRN2':[['Unsigned saturating Rounded Shift Right Narrow (immediate)', '']],
            'UQSHL':[['Unsigned saturating Shift Left (immediate)', '(immediate)'], ['Unsigned saturating Shift Left (register)', '(register)']],
            'UQSHRN':[['Unsigned saturating Shift Right Narrow (immediate)', '']],
            'UQSHRN2':[['Unsigned saturating Shift Right Narrow (immediate)', '']],
            'UQSUB':[['Unsigned saturating Subtract', '']],
            'UQXTN':[['Unsigned saturating extract Narrow', '']],
            'UQXTN2':[['Unsigned saturating extract Narrow', '']],
            'URECPE':[['Unsigned Reciprocal Estimate', '']],
            'URHADD':[['Unsigned Rounding Halving Add', '']],
            'URSHL':[['Unsigned Rounding Shift Left (register)', '']],
            'URSHR':[['Unsigned Rounding Shift Right (immediate)', '']],
            'URSQRTE':[['Unsigned Reciprocal Square Root Estimate', '']],
            'URSRA':[['Unsigned Rounding Shift Right and Accumulate (immediate)', '']],
            'USHL':[['Unsigned Shift Left (register)', '']],
            'USHLL':[['Unsigned Shift Left Long (immediate)', '']],
            'USHLL2':[['Unsigned Shift Left Long (immediate)', '']],
            'USHR':[['Unsigned Shift Right (immediate)', '']],
            'USQADD':[['Unsigned saturating Accumulate of Signed value', '']],
            'USRA':[['Unsigned Shift Right and Accumulate (immediate)', '']],
            'USUBL':[['Unsigned Subtract Long', '']],
            'USUBL2':[['Unsigned Subtract Long', '']],
            'USUBW':[['Unsigned Subtract Wide', '']],
            'USUBW2':[['Unsigned Subtract Wide', '']],
            'UXTL':[['Unsigned extend Long', '']],
            'UXTL2':[['Unsigned extend Long', '']],
            'UZP1':[['Unzip vectors (primary)', '']],
            'UZP2':[['Unzip vectors (secondary)', '']],
            'XAR':[['Exclusive OR and Rotate', '']],
            'XTN':[['Extract Narrow', '']],
            'XTN2':[['Extract Narrow', '']],
            'ZIP1':[['Zip vectors (primary)', '']],
            'ZIP2':[['Zip vectors (secondary)', '']]}
